

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun May 24 21:16:18 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13  0000                     
    14                           ; Version 2.10
    15                           ; Generated 31/07/2019 GMT
    16                           ; 
    17                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC18F4550 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     
    49                           	psect	nvCOMRAM
    50  00000A                     __pnvCOMRAM:
    51                           	opt callstack 0
    52  00000A                     _miValor:
    53                           	opt callstack 0
    54  00000A                     	ds	2
    55  0000                     _LATD	set	3980
    56  0000                     _LATC	set	3979
    57  0000                     _ADCON1	set	4033
    58  0000                     _TRISD	set	3989
    59  0000                     _TRISC	set	3988
    60  0000                     _ADRESL	set	4035
    61  0000                     _ADRESH	set	4036
    62  0000                     _ADCON0bits	set	4034
    63  0000                     _ADCON2bits	set	4032
    64                           
    65                           ; #config settings
    66  0000                     
    67                           	psect	cinit
    68  007F02                     __pcinit:
    69                           	opt callstack 0
    70  007F02                     start_initialization:
    71                           	opt callstack 0
    72  007F02                     __initialization:
    73                           	opt callstack 0
    74  007F02                     end_of_initialization:
    75                           	opt callstack 0
    76  007F02                     __end_of__initialization:
    77                           	opt callstack 0
    78  007F02  0100               	movlb	0
    79  007F04  EFB8  F03F         	goto	_main	;jump to C main() function
    80                           
    81                           	psect	cstackCOMRAM
    82  000001                     __pcstackCOMRAM:
    83                           	opt callstack 0
    84  000001                     ?_ADC_Read:
    85                           	opt callstack 0
    86  000001                     ADC_Init@kTad:
    87                           	opt callstack 0
    88                           
    89                           ; 2 bytes @ 0x0
    90  000001                     	ds	2
    91  000003                     ??_ADC_Read:
    92  000003                     ADC_Init@kTosc:
    93                           	opt callstack 0
    94                           
    95                           ; 2 bytes @ 0x2
    96  000003                     	ds	2
    97  000005                     ??_ADC_Init:
    98  000005                     ADC_Read@miConver:
    99                           	opt callstack 0
   100                           
   101                           ; 2 bytes @ 0x4
   102  000005                     	ds	2
   103  000007                     ADC_Read@miCanal:
   104                           	opt callstack 0
   105                           
   106                           ; 1 bytes @ 0x6
   107  000007                     	ds	1
   108  000008                     ??_main:
   109                           
   110                           ; 1 bytes @ 0x7
   111  000008                     	ds	2
   112                           
   113 ;;
   114 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   115 ;;
   116 ;; *************** function _main *****************
   117 ;; Defined at:
   118 ;;		line 13 in file "main.c"
   119 ;; Parameters:    Size  Location     Type
   120 ;;		None
   121 ;; Auto vars:     Size  Location     Type
   122 ;;		None
   123 ;; Return value:  Size  Location     Type
   124 ;;                  1    wreg      void 
   125 ;; Registers used:
   126 ;;		wreg, status,2, status,0, cstack
   127 ;; Tracked objects:
   128 ;;		On entry : 0/0
   129 ;;		On exit  : 0/0
   130 ;;		Unchanged: 0/0
   131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   132 ;;      Params:         0       0       0       0       0       0       0       0       0
   133 ;;      Locals:         0       0       0       0       0       0       0       0       0
   134 ;;      Temps:          2       0       0       0       0       0       0       0       0
   135 ;;      Totals:         2       0       0       0       0       0       0       0       0
   136 ;;Total ram usage:        2 bytes
   137 ;; Hardware stack levels required when called:    1
   138 ;; This function calls:
   139 ;;		_ADC_Init
   140 ;;		_ADC_Read
   141 ;; This function is called by:
   142 ;;		Startup code after reset
   143 ;; This function uses a non-reentrant model
   144 ;;
   145                           
   146                           	psect	text0
   147  007F70                     __ptext0:
   148                           	opt callstack 0
   149  007F70                     _main:
   150                           	opt callstack 30
   151  007F70                     
   152                           ;main.c: 14:     TRISC= 0x00;
   153  007F70  0E00               	movlw	0
   154  007F72  6E94               	movwf	148,c	;volatile
   155                           
   156                           ;main.c: 15:     TRISD = 0x00;
   157  007F74  0E00               	movlw	0
   158  007F76  6E95               	movwf	149,c	;volatile
   159                           
   160                           ;main.c: 16:     ADCON1 = 13;
   161  007F78  0E0D               	movlw	13
   162  007F7A  6EC1               	movwf	193,c	;volatile
   163                           
   164                           ;main.c: 17:     LATC=0x00;
   165  007F7C  0E00               	movlw	0
   166  007F7E  6E8B               	movwf	139,c	;volatile
   167  007F80                     
   168                           ;main.c: 19:     ADC_Init(2,4);
   169  007F80  0E00               	movlw	0
   170  007F82  6E02               	movwf	(ADC_Init@kTad+1)^0,c
   171  007F84  0E02               	movlw	2
   172  007F86  6E01               	movwf	ADC_Init@kTad^0,c
   173  007F88  0E00               	movlw	0
   174  007F8A  6E04               	movwf	(ADC_Init@kTosc+1)^0,c
   175  007F8C  0E04               	movlw	4
   176  007F8E  6E03               	movwf	ADC_Init@kTosc^0,c
   177  007F90  EC84  F03F         	call	_ADC_Init	;wreg free
   178  007F94                     l771:
   179                           
   180                           ;main.c: 24:         miValor = ADC_Read(0);
   181  007F94  0E00               	movlw	0
   182  007F96  EC95  F03F         	call	_ADC_Read
   183  007F9A  C001  F00A         	movff	?_ADC_Read,_miValor
   184  007F9E  C002  F00B         	movff	?_ADC_Read+1,_miValor+1
   185  007FA2                     
   186                           ;main.c: 25:         LATD = miValor;
   187  007FA2  C00A  FF8C         	movff	_miValor,3980	;volatile
   188                           
   189                           ;main.c: 26:         LATC = miValor>>8;
   190  007FA6  500B               	movf	(_miValor+1)^0,w,c
   191  007FA8  6E8B               	movwf	139,c	;volatile
   192  007FAA                     
   193                           ;main.c: 27:         LATC = (miValor>>8)|0b01000000;
   194  007FAA  500B               	movf	(_miValor+1)^0,w,c
   195  007FAC  0940               	iorlw	64
   196  007FAE  6E8B               	movwf	139,c	;volatile
   197  007FB0                     
   198                           ;main.c: 28:         _delay((unsigned long)((800)*(4000000L/4000.0)));
   199  007FB0  0E05               	movlw	5
   200  007FB2  6E09               	movwf	(??_main+1)^0,c
   201  007FB4  0E0F               	movlw	15
   202  007FB6  6E08               	movwf	??_main^0,c
   203  007FB8  0EF1               	movlw	241
   204  007FBA                     u37:
   205  007FBA  2EE8               	decfsz	wreg,f,c
   206  007FBC  D7FE               	bra	u37
   207  007FBE  2E08               	decfsz	??_main^0,f,c
   208  007FC0  D7FC               	bra	u37
   209  007FC2  2E09               	decfsz	(??_main+1)^0,f,c
   210  007FC4  D7FA               	bra	u37
   211  007FC6  F000               	nop	
   212  007FC8                     
   213                           ;main.c: 30:         miValor = ADC_Read(1);
   214  007FC8  0E01               	movlw	1
   215  007FCA  EC95  F03F         	call	_ADC_Read
   216  007FCE  C001  F00A         	movff	?_ADC_Read,_miValor
   217  007FD2  C002  F00B         	movff	?_ADC_Read+1,_miValor+1
   218  007FD6                     
   219                           ;main.c: 31:         LATD = miValor;
   220  007FD6  C00A  FF8C         	movff	_miValor,3980	;volatile
   221  007FDA                     
   222                           ;main.c: 32:         LATC = (miValor>>8)|0b10000000;
   223  007FDA  500B               	movf	(_miValor+1)^0,w,c
   224  007FDC  0980               	iorlw	128
   225  007FDE  6E8B               	movwf	139,c	;volatile
   226  007FE0                     
   227                           ;main.c: 33:         _delay((unsigned long)((800)*(4000000L/4000.0)));
   228  007FE0  0E05               	movlw	5
   229  007FE2  6E09               	movwf	(??_main+1)^0,c
   230  007FE4  0E0F               	movlw	15
   231  007FE6  6E08               	movwf	??_main^0,c
   232  007FE8  0EF1               	movlw	241
   233  007FEA                     u47:
   234  007FEA  2EE8               	decfsz	wreg,f,c
   235  007FEC  D7FE               	bra	u47
   236  007FEE  2E08               	decfsz	??_main^0,f,c
   237  007FF0  D7FC               	bra	u47
   238  007FF2  2E09               	decfsz	(??_main+1)^0,f,c
   239  007FF4  D7FA               	bra	u47
   240  007FF6  F000               	nop	
   241  007FF8  EFCA  F03F         	goto	l771
   242  007FFC  EF00  F000         	goto	start
   243  008000                     __end_of_main:
   244                           	opt callstack 0
   245                           
   246 ;; *************** function _ADC_Read *****************
   247 ;; Defined at:
   248 ;;		line 33 in file "./myADC.h"
   249 ;; Parameters:    Size  Location     Type
   250 ;;  miCanal         1    wreg     unsigned char 
   251 ;; Auto vars:     Size  Location     Type
   252 ;;  miCanal         1    6[COMRAM] unsigned char 
   253 ;;  miConver        2    4[COMRAM] int 
   254 ;; Return value:  Size  Location     Type
   255 ;;                  2    0[COMRAM] int 
   256 ;; Registers used:
   257 ;;		wreg, status,2, status,0
   258 ;; Tracked objects:
   259 ;;		On entry : 0/0
   260 ;;		On exit  : 0/0
   261 ;;		Unchanged: 0/0
   262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   263 ;;      Params:         2       0       0       0       0       0       0       0       0
   264 ;;      Locals:         3       0       0       0       0       0       0       0       0
   265 ;;      Temps:          2       0       0       0       0       0       0       0       0
   266 ;;      Totals:         7       0       0       0       0       0       0       0       0
   267 ;;Total ram usage:        7 bytes
   268 ;; Hardware stack levels used:    1
   269 ;; This function calls:
   270 ;;		Nothing
   271 ;; This function is called by:
   272 ;;		_main
   273 ;; This function uses a non-reentrant model
   274 ;;
   275                           
   276                           	psect	text1
   277  007F2A                     __ptext1:
   278                           	opt callstack 0
   279  007F2A                     _ADC_Read:
   280                           	opt callstack 30
   281                           
   282                           ;incstack = 0
   283                           ;ADC_Read@miCanal stored from wreg
   284  007F2A  6E07               	movwf	ADC_Read@miCanal^0,c
   285  007F2C                     
   286                           ;./myADC.h: 34:     int miConver;;./myADC.h: 35:      ADCON0bits.CHS=miCanal;
   287  007F2C  C007  F003         	movff	ADC_Read@miCanal,??_ADC_Read
   288  007F30  4603               	rlncf	??_ADC_Read^0,f,c
   289  007F32  4603               	rlncf	??_ADC_Read^0,f,c
   290  007F34  50C2               	movf	194,w,c	;volatile
   291  007F36  1803               	xorwf	??_ADC_Read^0,w,c
   292  007F38  0BC3               	andlw	-61
   293  007F3A  1803               	xorwf	??_ADC_Read^0,w,c
   294  007F3C  6EC2               	movwf	194,c	;volatile
   295  007F3E                     
   296                           ;./myADC.h: 36:      ADCON0bits.ADON = 1;
   297  007F3E  80C2               	bsf	194,0,c	;volatile
   298  007F40                     
   299                           ;./myADC.h: 37:      ADCON0bits.GO_nDONE = 1;
   300  007F40  82C2               	bsf	194,1,c	;volatile
   301  007F42                     l26:
   302  007F42  B2C2               	btfsc	194,1,c	;volatile
   303  007F44  EFA6  F03F         	goto	u21
   304  007F48  EFA8  F03F         	goto	u20
   305  007F4C                     u21:
   306  007F4C  EFA1  F03F         	goto	l26
   307  007F50                     u20:
   308  007F50                     
   309                           ;./myADC.h: 39:      miConver = ADRESH<<8 | ADRESL;
   310  007F50  50C3               	movf	195,w,c	;volatile
   311  007F52  CFC4 F003          	movff	4036,??_ADC_Read	;volatile
   312  007F56  6A04               	clrf	(??_ADC_Read+1)^0,c
   313  007F58  C003  F004         	movff	??_ADC_Read,??_ADC_Read+1
   314  007F5C  6A03               	clrf	??_ADC_Read^0,c
   315  007F5E  1003               	iorwf	??_ADC_Read^0,w,c
   316  007F60  6E05               	movwf	ADC_Read@miConver^0,c
   317  007F62  5004               	movf	(??_ADC_Read+1)^0,w,c
   318  007F64  6E06               	movwf	(ADC_Read@miConver+1)^0,c
   319  007F66                     
   320                           ;./myADC.h: 40:      return miConver;
   321  007F66  C005  F001         	movff	ADC_Read@miConver,?_ADC_Read
   322  007F6A  C006  F002         	movff	ADC_Read@miConver+1,?_ADC_Read+1
   323  007F6E  0012               	return		;funcret
   324  007F70                     __end_of_ADC_Read:
   325                           	opt callstack 0
   326                           
   327 ;; *************** function _ADC_Init *****************
   328 ;; Defined at:
   329 ;;		line 27 in file "./myADC.h"
   330 ;; Parameters:    Size  Location     Type
   331 ;;  kTad            2    0[COMRAM] int 
   332 ;;  kTosc           2    2[COMRAM] int 
   333 ;; Auto vars:     Size  Location     Type
   334 ;;		None
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg, status,2, status,0
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   344 ;;      Params:         4       0       0       0       0       0       0       0       0
   345 ;;      Locals:         0       0       0       0       0       0       0       0       0
   346 ;;      Temps:          1       0       0       0       0       0       0       0       0
   347 ;;      Totals:         5       0       0       0       0       0       0       0       0
   348 ;;Total ram usage:        5 bytes
   349 ;; Hardware stack levels used:    1
   350 ;; This function calls:
   351 ;;		Nothing
   352 ;; This function is called by:
   353 ;;		_main
   354 ;; This function uses a non-reentrant model
   355 ;;
   356                           
   357                           	psect	text2
   358  007F08                     __ptext2:
   359                           	opt callstack 0
   360  007F08                     _ADC_Init:
   361                           	opt callstack 30
   362  007F08                     
   363                           ;./myADC.h: 28:     ADCON2bits.ACQT =kTad;
   364  007F08  C001  F005         	movff	ADC_Init@kTad,??_ADC_Init
   365  007F0C  4605               	rlncf	??_ADC_Init^0,f,c
   366  007F0E  4605               	rlncf	??_ADC_Init^0,f,c
   367  007F10  4605               	rlncf	??_ADC_Init^0,f,c
   368  007F12  50C0               	movf	192,w,c	;volatile
   369  007F14  1805               	xorwf	??_ADC_Init^0,w,c
   370  007F16  0BC7               	andlw	-57
   371  007F18  1805               	xorwf	??_ADC_Init^0,w,c
   372  007F1A  6EC0               	movwf	192,c	;volatile
   373                           
   374                           ;./myADC.h: 29:     ADCON2bits.ADCS =kTosc;
   375  007F1C  50C0               	movf	192,w,c	;volatile
   376  007F1E  1803               	xorwf	ADC_Init@kTosc^0,w,c
   377  007F20  0BF8               	andlw	-8
   378  007F22  1803               	xorwf	ADC_Init@kTosc^0,w,c
   379  007F24  6EC0               	movwf	192,c	;volatile
   380  007F26                     
   381                           ;./myADC.h: 30:     ADCON2bits.ADFM = 1;
   382  007F26  8EC0               	bsf	192,7,c	;volatile
   383  007F28  0012               	return		;funcret
   384  007F2A                     __end_of_ADC_Init:
   385                           	opt callstack 0
   386  0000                     
   387                           	psect	rparam
   388  0000                     tosu	equ	0xFFF
   389                           tosh	equ	0xFFE
   390                           tosl	equ	0xFFD
   391                           stkptr	equ	0xFFC
   392                           pclatu	equ	0xFFB
   393                           pclath	equ	0xFFA
   394                           pcl	equ	0xFF9
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           prodh	equ	0xFF4
   400                           prodl	equ	0xFF3
   401                           indf0	equ	0xFEF
   402                           postinc0	equ	0xFEE
   403                           postdec0	equ	0xFED
   404                           preinc0	equ	0xFEC
   405                           plusw0	equ	0xFEB
   406                           fsr0h	equ	0xFEA
   407                           fsr0l	equ	0xFE9
   408                           wreg	equ	0xFE8
   409                           indf1	equ	0xFE7
   410                           postinc1	equ	0xFE6
   411                           postdec1	equ	0xFE5
   412                           preinc1	equ	0xFE4
   413                           plusw1	equ	0xFE3
   414                           fsr1h	equ	0xFE2
   415                           fsr1l	equ	0xFE1
   416                           bsr	equ	0xFE0
   417                           indf2	equ	0xFDF
   418                           postinc2	equ	0xFDE
   419                           postdec2	equ	0xFDD
   420                           preinc2	equ	0xFDC
   421                           plusw2	equ	0xFDB
   422                           fsr2h	equ	0xFDA
   423                           fsr2l	equ	0xFD9
   424                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      9      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     241
                                              7 COMRAM     2     2      0
                           _ADC_Init
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             5     1      4     196
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      9       B       1       11.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       B       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       B      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun May 24 21:16:18 2020

                     l23 7F28                       l26 7F42                       l29 7F6E  
                     u20 7F50                       u21 7F4C                       u37 7FBA  
                     u47 7FEA              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l751 7F08                      l753 7F26                      l761 7F50  
                    l763 7F66                      l755 7F2C                      l771 7F94  
                    l757 7F3E                      l781 7FD6                      l773 7FA2  
                    l759 7F40                      l783 7FDA                      l775 7FAA  
                    l767 7F70                      l785 7FE0                      l777 7FB0  
                    l769 7F80                      l779 7FC8             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000             __CFG_BOR$OFF 000000                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     _LATC 000F8B  
                   _LATD 000F8C                     _main 7F70         __end_of_ADC_Init 7F2A  
       __end_of_ADC_Read 7F70                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0001            __CFG_USBDIV$1 000000  
                  _TRISC 000F94                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000           __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000  
        __initialization 7F02             __end_of_main 8000                   ??_main 0008  
          __activetblptr 000000                   _ADCON1 000FC1                   _ADRESH 000FC4  
                 _ADRESL 000FC3           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
        ADC_Read@miCanal 0007                ?_ADC_Init 0001                ?_ADC_Read 0001  
             __accesstop 0060  __end_of__initialization 7F02          __CFG_FOSC$XT_XT 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001               ??_ADC_Init 0005  
             ??_ADC_Read 0003               __pnvCOMRAM 000A          __CFG_VREGEN$OFF 000000  
                __Hparam 0000                  __Lparam 0000             ADC_Init@kTad 0001  
                __pcinit 7F02                  __ramtop 0800                  __ptext0 7F70  
                __ptext1 7F2A                  __ptext2 7F08                  _miValor 000A  
       ADC_Read@miConver 0005     end_of_initialization 7F02        __size_of_ADC_Init 0022  
      __size_of_ADC_Read 0046      start_initialization 7F02         __CFG_LPT1OSC$OFF 000000  
               _ADC_Init 7F08                 _ADC_Read 7F2A         __CFG_WDTPS$32768 000000  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0                 __Hrparam 0000  
          ADC_Init@kTosc 0003                 __Lrparam 0000            __size_of_main 0090  
  __CFG_CPUDIV$OSC1_PLL2 000000  
